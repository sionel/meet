apply plugin: 'com.android.application'
// apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

boolean googleServicesEnabled = project.file('google-services.json').exists()

// Crashlytics integration is done as part of Firebase now, so it gets
// automagically activated with google-services.json
// if (googleServicesEnabled) {
//     apply plugin: 'io.fabric'
// }


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.wehago.meet'
        versionCode Integer.parseInt(project.buildNumber)
        versionName project.appVersion

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        ndk {
            abiFilters 'armeabi-v7a', 'x86'
        }

        packagingOptions {
            // The project react-native does not provide 64-bit binaries at the
            // time of this writing. Unfortunately, packaging any 64-bit
            // binaries into the .apk will crash the app at runtime on 64-bit
            // platforms.
            exclude '/lib/mips64/**'
            exclude '/lib/arm64-v8a/**'
            exclude '/lib/x86_64/**'
        }
    }
    // signingConfigs {
    //     release {
    //         if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
    //             storeFile file(MYAPP_RELEASE_STORE_FILE)
    //             storePassword MYAPP_RELEASE_STORE_PASSWORD
    //             keyAlias MYAPP_RELEASE_KEY_ALIAS
    //             keyPassword MYAPP_RELEASE_KEY_PASSWORD
    //         }
    //     }
    // }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
            buildConfigField "boolean", "GOOGLE_SERVICES_ENABLED", "${googleServicesEnabled}"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-release.pro'
            buildConfigField "boolean", "GOOGLE_SERVICES_ENABLED", "${googleServicesEnabled}"
            // signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    // maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    implementation project(':lottie-react-native')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    // For animated GIF support
    implementation 'com.facebook.fresco:animated-gif:1.10.0'

    implementation project(':sdk')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'

    // Glide
    implementation("com.github.bumptech.glide:glide:${rootProject.ext.glideVersion}") {
        exclude group: "com.android.support", module: "glide"
    }
    implementation("com.github.bumptech.glide:annotations:${rootProject.ext.glideVersion}") {
        exclude group: "com.android.support", module: "annotations"
    }
    annotationProcessor "com.github.bumptech.glide:compiler:${rootProject.ext.glideVersion}"

    // Firebase
    //  - Crashlytics
    //  - Dynamic Links
    // implementation 'com.google.firebase:firebase-core:16.0.6'
    // implementation 'com.crashlytics.sdk.android:crashlytics:2.9.8'
    // implementation 'com.google.firebase:firebase-dynamic-links:16.1.5'
}

gradle.projectsEvaluated {
    // Dropbox integration
    //

    def dropboxAppKey
    if (project.file('dropbox.key').exists()) {
        dropboxAppKey = project.file('dropbox.key').text.trim() - 'db-'
    }

    if (dropboxAppKey) {
        android.defaultConfig.resValue('string', 'dropbox_app_key', "${dropboxAppKey}")

        def dropboxActivity = """
          <activity
              android:configChanges="keyboard|orientation"
              android:launchMode="singleTask"
              android:name="com.dropbox.core.android.AuthActivity">
            <intent-filter>
              <action android:name="android.intent.action.VIEW" />
              <category android:name="android.intent.category.BROWSABLE" />
              <category android:name="android.intent.category.DEFAULT" />
              <data android:scheme="db-${dropboxAppKey}" />
            </intent-filter>
          </activity>"""

        android.applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.processManifest.doLast {
                    def f = new File(manifestOutputDirectory, 'AndroidManifest.xml')
                    if (!f.isFile()) {
                        f = new File(new File(manifestOutputDirectory, output.dirName), 'AndroidManifest.xml')
                    }
                    if (f.exists()) {
                        def charset = 'UTF-8'
                        def s = f.getText(charset)
                        s = s.replace('</application>', "${dropboxActivity}</application>")
                        f.write(s, charset)
                    }
                }
            }
        }
    }
}

if (googleServicesEnabled) {
   apply plugin: 'com.google.gms.google-services'
}
